@page "/serverstatus"
@using ServerManagement.Models
@using ServerManagement.StateStore

@inject IServersEFCoreRepository ServersEFCoreRepository


@rendermode InteractiveServer

@inherits ComponentBase

@inject NavigationManager NavigationManager
@* @inject SessionStorage SessionStorage *@
@inject ContainerStorage ContainerStorage
<h3>Server Status</h3>
<br />
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

    <FieldComponent Label="Server Status">
        <Control>
            <input type="checkbox"
                   @bind-value="isOnline"
                   checked class="form-check-input"></input>

        </Control>
    </FieldComponent>
    <br />
    <button type="button" class="btn btn-primary" @onclick="Save">Save</button>

@code {
    private bool isOnline;

    private string? errorMessage;

    private Server? server;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            server = ContainerStorage.GetServer();
            StateHasChanged();
        }
    }

    private void Save()
    {
        if (server != null)
        {
            ContainerStorage.SetServer(null);
            server.IsOnline = isOnline;
            ServersEFCoreRepository.AddServer(server);
            NavigationManager.NavigateTo($"/servers/back_from/{server.City}");
        }
    }
}